
import React, { useState, useContext } from 'react';
import { SelectedPromptTerm, PromptCategoryDisplay, AddCustomTermModalInitialData, SelectedPromptTermForChip } from '../types';
import { PromptTermChip } from './PromptTermChip';
import { ClipboardDocumentIcon, SparklesIcon, ExclamationTriangleIcon, TrashIcon, PlusCircleIcon, LockClosedIcon, LockOpenIcon, ArrowPathIcon as ResetIcon } from './Icons';
import { LoadingSpinner } from './LoadingSpinner';
import { IconButton } from './IconButton';
import { SettingsContext } from '../contexts/SettingsContext';
import { DEFAULT_UI_TEXTS } from '../constants/uiTexts';

interface PromptBuilderProps {
  activeTerms: SelectedPromptTermForChip[]; 
  onUpdateWeight: (termId: string, delta: number) => void;
  onToggleLock: (termId: string) => void;
  onRemoveTerm: (termId: string) => void;
  onClearAllTerms: () => void;
  
  autoGeneratedPromptEn: string; // Renamed from generatedPromptEn
  autoGeneratedPromptZh: string; // Renamed from generatedPromptZh
  
  manualPromptEn: string;
  onManualPromptEnChange: (value: string) => void;
  isPromptEnManual: boolean;
  onIsPromptEnManualChange: (value: boolean) => void;
  
  manualPromptZh: string;
  onManualPromptZhChange: (value: string) => void;
  isPromptZhManual: boolean;
  onIsPromptZhManualChange: (value: boolean) => void;

  onPolishPrompt: (language: 'en' | 'zh') => void;
  isPolishingEn: boolean;
  isPolishingZh: boolean;
  polishError: string | null;
  clearPolishError: () => void;
  isGeminiKeyAvailable: boolean; // Renamed from geminiApiKeySet
  title: string;
  isVisible: boolean;
  onToggleVisibility: (visible: boolean) => void;
  onSaveTermFromChip: (term: SelectedPromptTerm) => void; 
  onOpenQuickAddTermModal: (initialEn: string, initialZh: string) => void;
}

export const PromptBuilder: React.FC<PromptBuilderProps> = ({ 
  activeTerms, 
  onUpdateWeight, 
  onToggleLock, 
  onRemoveTerm,
  onClearAllTerms,
  autoGeneratedPromptEn,
  autoGeneratedPromptZh,
  manualPromptEn,
  onManualPromptEnChange,
  isPromptEnManual,
  onIsPromptEnManualChange,
  manualPromptZh,
  onManualPromptZhChange,
  isPromptZhManual,
  onIsPromptZhManualChange,
  onPolishPrompt,
  isPolishingEn,
  isPolishingZh,
  polishError,
  clearPolishError,
  isGeminiKeyAvailable, // Renamed
  title,
  isVisible,
  onToggleVisibility,
  onSaveTermFromChip,
  onOpenQuickAddTermModal,
}) => {
  const settingsContext = useContext(SettingsContext);
  const uiTexts = settingsContext?.settings.uiTexts || DEFAULT_UI_TEXTS;

  const [quickTermEn, setQuickTermEn] = useState('');
  const [quickTermZh, setQuickTermZh] = useState('');

  // For Request 6: Local lock states for textareas in UI, separate from manual edit flag
  const [isFinalPromptEnLocked, setIsFinalPromptEnLocked] = useState(true);
  const [isFinalPromptZhLocked, setIsFinalPromptZhLocked] = useState(true);


  const copyToClipboard = (text: string, lang: '英文' | '中文') => {
    navigator.clipboard.writeText(text).then(() => {
      alert(`${lang}提示詞已複製到剪貼簿！`);
    }).catch(err => {
      console.error('複製提示詞失敗: ', err);
      alert(`複製${lang}提示詞失敗。`);
    });
  };

  const handleQuickAddClick = () => {
    if (!quickTermEn.trim() && !quickTermZh.trim()) {
        alert("請至少輸入英文或中文的快速新增詞語。");
        return;
    }
    onOpenQuickAddTermModal(quickTermEn, quickTermZh);
    setQuickTermEn('');
    setQuickTermZh('');
  };

  const handleCopyToQuickAddFromChip = (termEn: string, termZh: string) => {
    setQuickTermEn(termEn);
    setQuickTermZh(termZh);
  };

  const displayPromptEn = isPromptEnManual ? manualPromptEn : autoGeneratedPromptEn;
  const displayPromptZh = isPromptZhManual ? manualPromptZh : autoGeneratedPromptZh;

  const handleFinalPromptEnChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    onManualPromptEnChange(e.target.value);
    onIsPromptEnManualChange(true);
  };
  const handleFinalPromptZhChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    onManualPromptZhChange(e.target.value);
    onIsPromptZhManualChange(true);
  };

  const toggleLockEn = () => {
    const newLockState = !isFinalPromptEnLocked;
    setIsFinalPromptEnLocked(newLockState);
    if (newLockState && isPromptEnManual) {
      // If locking and it was manual, keep it manual.
    } else if (newLockState && !isPromptEnManual){
      // If locking and it was auto, it remains auto.
    } else if (!newLockState) {
      // Unlocking always makes it effectively manual if user types
      // onIsPromptEnManualChange(true); // User typing will set this
    }
  };

  const toggleLockZh = () => {
    const newLockState = !isFinalPromptZhLocked;
    setIsFinalPromptZhLocked(newLockState);
    if (newLockState && isPromptZhManual) {
      // If locking and it was manual, keep it manual.
    } else if (!newLockState) {
      // Unlocking makes it manual
      // onIsPromptZhManualChange(true); // User typing will set this
    }
  };

  const resetToAutoEn = () => {
    onIsPromptEnManualChange(false);
    // onManualPromptEnChange(autoGeneratedPromptEn); // Optionally sync manual with auto on reset
    setIsFinalPromptEnLocked(true); // Usually re-lock after reset
  };
  const resetToAutoZh = () => {
    onIsPromptZhManualChange(false);
    // onManualPromptZhChange(autoGeneratedPromptZh);
    setIsFinalPromptZhLocked(true);
  };


  return (
    <div className={`p-4 bg-white rounded-xl shadow-lg border border-gray-200 transition-opacity duration-300 ${isVisible ? 'opacity-100' : 'opacity-80'}`}>
      <div className="flex justify-between items-center">
        <h3 className="text-md font-semibold text-gray-900/90">{title}</h3>
        <label htmlFor="togglePromptBuilder" className="flex items-center cursor-pointer">
            <div className="relative">
                <input 
                    type="checkbox" 
                    id="togglePromptBuilder" 
                    className="sr-only" 
                    checked={isVisible} 
                    onChange={(e) => onToggleVisibility(e.target.checked)}
                />
                <div className={`block w-10 h-6 rounded-full transition-colors ${isVisible ? 'bg-black' : 'bg-gray-300'}`}></div>
                <div className={`dot absolute left-1 top-1 bg-white w-4 h-4 rounded-full transition-transform ${isVisible ? 'translate-x-full' : ''}`}></div>
            </div>
            <span className="ml-2 text-xs text-gray-600">{isVisible ? '顯示中' : '已隱藏'}</span>
        </label>
      </div>

      <div 
        className={`transition-all duration-300 ease-in-out overflow-hidden space-y-4 ${isVisible ? 'max-h-[1200px] opacity-100 mt-4' : 'max-h-0 opacity-0'}`}
        aria-hidden={!isVisible}
      >
        <div>
          <div className="flex justify-end items-center mb-2">
              {activeTerms.length > 0 && (
                  <IconButton
                      onClick={onClearAllTerms}
                      aria-label="全部清除已選提示詞"
                      title="全部清除"
                      className="text-gray-700 hover:text-black active:scale-95 transform transition-transform duration-100"
                      disabled={!isVisible}
                  >
                      <TrashIcon className="w-4 h-4 mr-1" />
                      <span className="text-xs">全部清除</span>
                  </IconButton>
              )}
          </div>
          {activeTerms.length === 0 ? (
            <p className="text-sm text-gray-600">從分類中選擇詞語以建立您的提示詞。</p>
          ) : (
            <div className="space-y-2 max-h-60 overflow-y-auto apple-scroll p-1">
              {activeTerms.map((term) => (
                <PromptTermChip
                  key={term.id}
                  term={term} 
                  onUpdateWeight={onUpdateWeight}
                  onToggleLock={onToggleLock}
                  onRemove={onRemoveTerm}
                  onSaveTerm={onSaveTermFromChip}
                  onCopyToQuickAdd={handleCopyToQuickAddFromChip} 
                  uiTexts={{
                    saveTermToCategoryButtonTitle: uiTexts.saveTermToCategoryButtonTitle.textZh,
                    chipSaveTermButtonLabel: uiTexts.chipSaveTermButtonLabel.textZh,
                    chipCopyToQuickAddButtonTitle: uiTexts.chipCopyToQuickAddButtonTitle.textZh,
                  }}
                />
              ))}
            </div>
          )}
        </div>
        
        <div className="pt-3 border-t border-gray-200 space-y-2">
            <h4 className="text-sm font-medium text-gray-900/90">快速新增自訂詞語</h4>
            <input 
                type="text" 
                placeholder="快速英文詞語" 
                value={quickTermEn} 
                onChange={(e) => setQuickTermEn(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md text-xs bg-white text-gray-900 placeholder-gray-500"
                disabled={!isVisible}
            />
            <input 
                type="text" 
                placeholder="快速中文詞語" 
                value={quickTermZh} 
                onChange={(e) => setQuickTermZh(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md text-xs bg-white text-gray-900 placeholder-gray-500"
                disabled={!isVisible}
            />
            <button 
                onClick={handleQuickAddClick}
                disabled={!isVisible || (!quickTermEn.trim() && !quickTermZh.trim())}
                className="w-full flex items-center justify-center px-3 py-1.5 border-2 border-dashed border-gray-300 text-xs font-medium rounded-md text-gray-800 hover:text-black hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-gray-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed active:scale-95 transform duration-100"
            >
                <PlusCircleIcon className="w-4 h-4 mr-1.5" />
                新增並儲存到分類...
            </button>
        </div>


        <div className="space-y-3 pt-3 border-t border-gray-200">
          {polishError && (
              <div className="my-2 p-2 bg-gray-100 border border-gray-300 rounded-md text-xs text-gray-700 flex items-start justify-between">
                  <div className="flex items-start">
                      <ExclamationTriangleIcon className="w-4 h-4 mr-1.5 flex-shrink-0 mt-0.5"/>
                      <span><strong>潤飾錯誤:</strong> {polishError}</span>
                  </div>
                  <button onClick={clearPolishError} className="text-gray-600 hover:text-black text-xs font-semibold active:scale-95 transform transition-transform duration-100">&times;</button>
              </div>
          )}
          <div>
            <div className="flex justify-between items-center mb-1">
              <label htmlFor="promptEn" className="block text-sm font-medium text-gray-900/90">英文提示詞</label>
              <div className="flex items-center space-x-1">
                  <IconButton onClick={toggleLockEn} title={isFinalPromptEnLocked ? "解鎖以編輯" : "鎖定提示詞"} aria-label={isFinalPromptEnLocked ? "解鎖以編輯英文提示詞" : "鎖定英文提示詞"} className={`${isFinalPromptEnLocked ? "text-gray-600" : "text-black"} active:scale-95 transform transition-transform duration-100`} disabled={!isVisible}>
                      {isFinalPromptEnLocked ? <LockClosedIcon className="w-4 h-4" /> : <LockOpenIcon className="w-4 h-4" />}
                  </IconButton>
                  {isPromptEnManual && isFinalPromptEnLocked && ( 
                      <IconButton onClick={resetToAutoEn} title="還原為自動生成" aria-label="還原英文提示詞為自動生成" className="text-gray-600 active:scale-95 transform transition-transform duration-100" disabled={!isVisible}>
                          <ResetIcon className="w-4 h-4" />
                      </IconButton>
                  )}
                  <IconButton onClick={() => onPolishPrompt('en')} disabled={isPolishingEn || !displayPromptEn || !isGeminiKeyAvailable || !isVisible || isFinalPromptEnLocked} className="disabled:opacity-50 text-gray-600 active:scale-95 transform transition-transform duration-100" title={!isGeminiKeyAvailable ? "Gemini API 金鑰未設定" : (isPolishingEn ? "潤飾中..." : "AI 潤飾")} aria-label={!isGeminiKeyAvailable ? "Gemini API 金鑰未設定" : (isPolishingEn ? "正在潤飾英文提示詞" : "使用AI潤飾英文提示詞")}>
                      {isPolishingEn ? <LoadingSpinner className="w-3.5 h-3.5"/> : <SparklesIcon className="w-3.5 h-3.5" />}
                  </IconButton>
                  <IconButton onClick={() => copyToClipboard(displayPromptEn, '英文')} title="複製" aria-label="複製英文提示詞" disabled={!isVisible} className="text-gray-600 active:scale-95 transform transition-transform duration-100">
                      <ClipboardDocumentIcon className="w-4 h-4" />
                  </IconButton>
              </div>
            </div>
            <textarea
              id="promptEn"
              rows={4}
              value={displayPromptEn}
              onChange={handleFinalPromptEnChange}
              readOnly={isFinalPromptEnLocked}
              className={`w-full p-2 border rounded-md shadow-sm text-sm focus:ring-black focus:border-black
                          ${isFinalPromptEnLocked ? 'bg-gray-100 text-gray-700 cursor-default' : 'bg-white text-gray-900'}`}
              placeholder="英文提示詞將顯示於此..."
              aria-label="英文提示詞輸出區域"
              disabled={!isVisible}
            />
             {isPromptEnManual && <p className="text-[10px] text-orange-600 mt-0.5">手動編輯中</p>}
          </div>
          <div>
            <div className="flex justify-between items-center mb-1">
              <label htmlFor="promptZh" className="block text-sm font-medium text-gray-900/90">中文提示詞</label>
              <div className="flex items-center space-x-1">
                   <IconButton onClick={toggleLockZh} title={isFinalPromptZhLocked ? "解鎖以編輯" : "鎖定提示詞"} aria-label={isFinalPromptZhLocked ? "解鎖以編輯中文提示詞" : "鎖定中文提示詞"} className={`${isFinalPromptZhLocked ? "text-gray-600" : "text-black"} active:scale-95 transform transition-transform duration-100`} disabled={!isVisible}>
                      {isFinalPromptZhLocked ? <LockClosedIcon className="w-4 h-4" /> : <LockOpenIcon className="w-4 h-4" />}
                  </IconButton>
                  {isPromptZhManual && isFinalPromptZhLocked && (
                      <IconButton onClick={resetToAutoZh} title="還原為自動生成" aria-label="還原中文提示詞為自動生成" className="text-gray-600 active:scale-95 transform transition-transform duration-100" disabled={!isVisible}>
                          <ResetIcon className="w-4 h-4" />
                      </IconButton>
                  )}
                  <IconButton onClick={() => onPolishPrompt('zh')} disabled={isPolishingZh || !displayPromptZh || !isGeminiKeyAvailable || !isVisible || isFinalPromptZhLocked} className="disabled:opacity-50 text-gray-600 active:scale-95 transform transition-transform duration-100" title={!isGeminiKeyAvailable ? "Gemini API 金鑰未設定" : (isPolishingZh ? "潤飾中..." : "AI 潤飾")} aria-label={!isGeminiKeyAvailable ? "Gemini API 金鑰未設定" : (isPolishingZh ? "正在潤飾中文提示詞" : "使用AI潤飾中文提示詞")}>
                      {isPolishingZh ? <LoadingSpinner className="w-3.5 h-3.5"/> : <SparklesIcon className="w-3.5 h-3.5" />}
                  </IconButton>
                  <IconButton onClick={() => copyToClipboard(displayPromptZh, '中文')} title="複製" aria-label="複製中文提示詞" disabled={!isVisible} className="text-gray-600 active:scale-95 transform transition-transform duration-100">
                      <ClipboardDocumentIcon className="w-4 h-4" />
                  </IconButton>
              </div>
            </div>
            <textarea
              id="promptZh"
              rows={4}
              value={displayPromptZh}
              onChange={handleFinalPromptZhChange}
              readOnly={isFinalPromptZhLocked}
              className={`w-full p-2 border rounded-md shadow-sm text-sm focus:ring-black focus:border-black
                          ${isFinalPromptZhLocked ? 'bg-gray-100 text-gray-700 cursor-default' : 'bg-white text-gray-900'}`}
              placeholder="中文提示詞將顯示於此..."
              aria-label="中文提示詞輸出區域"
              disabled={!isVisible}
            />
             {isPromptZhManual && <p className="text-[10px] text-orange-600 mt-0.5">手動編輯中</p>}
          </div>
        </div>
      </div>
    </div>
  );
};
